
#[test_only]
module suidouble_metadata::compress_tests {

    use suidouble_metadata::compress;
    use std::vector;
    use std::debug;

    #[test]
    fun test_compressing() {
        // let bytevec: vector<u8> = b"";
        // let svg: vector<u8> = b"<svg width=\"38\" height=\"24\" viewBox=\"0 0 38 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M13.6542 6.72469C13.527 5.65073 13.0112 4.81701 12.1069 4.22351C11.2025 3.63001 10.0932 3.33326 8.77902 3.33326C7.81812 3.33326 6.97733 3.4887 6.25665 3.79958C5.54304 4.11046 4.98486 4.53792 4.58213 5.08196C4.18646 5.626 3.98863 6.24423 3.98863 6.93665C3.98863 7.51602 4.12641 8.01413 4.40196 8.431C4.68458 8.84079 5.04492 9.18347 5.48298 9.45902C5.92104 9.72751 6.38029 9.95007 6.86075 10.1267C7.3412 10.2963 7.78279 10.4341 8.18552 10.54L10.3899 11.1335C10.9552 11.2819 11.584 11.4868 12.2764 11.7482C12.9759 12.0097 13.6436 12.3665 14.2795 12.8187C14.9224 13.2638 15.4524 13.8361 15.8692 14.5356C16.2861 15.235 16.4945 16.0935 16.4945 17.1109C16.4945 18.2838 16.1872 19.3436 15.5725 20.2904C14.9648 21.2372 14.0746 21.9896 12.9017 22.5478C11.7359 23.106 10.3193 23.3851 8.65184 23.3851C7.09744 23.3851 5.75147 23.1342 4.61393 22.6326C3.48345 22.1309 2.5932 21.4315 1.94318 20.5342C1.30022 19.6368 0.936348 18.5947 0.851562 17.4077H3.5647C3.63536 18.2273 3.91091 18.9056 4.39136 19.4425C4.87888 19.9724 5.49358 20.3681 6.23545 20.6295C6.98439 20.8839 7.78986 21.0111 8.65184 21.0111C9.65514 21.0111 10.556 20.8486 11.3544 20.5236C12.1528 20.1915 12.7851 19.7322 13.2515 19.1458C13.7178 18.5523 13.9509 17.8599 13.9509 17.0685C13.9509 16.3479 13.7496 15.7614 13.3468 15.3092C12.9441 14.857 12.4142 14.4896 11.7571 14.207C11.1 13.9244 10.3899 13.6771 9.62688 13.4651L6.95613 12.7021C5.26042 12.2146 3.91798 11.5186 2.92881 10.6142C1.93964 9.70985 1.44506 8.52638 1.44506 7.06383C1.44506 5.84856 1.77361 4.78874 2.4307 3.88437C3.09485 2.97292 3.9851 2.26637 5.10144 1.76472C6.22485 1.25601 7.47897 1.00165 8.86381 1.00165C10.2628 1.00165 11.5063 1.25248 12.5944 1.75412C13.6825 2.24871 14.5444 2.92699 15.1803 3.78898C15.8233 4.65097 16.1624 5.62954 16.1978 6.72469H13.6542Z\" fill=\"#F7F7F8\"/><path d=\"M28.9452 16.3479V6.72469H31.4464V23.0035H28.9452V20.248H28.7756C28.3941 21.0747 27.8006 21.7777 26.9951 22.357C26.1896 22.9293 25.1722 23.2155 23.9428 23.2155C22.9254 23.2155 22.021 22.9929 21.2297 22.5478C20.4384 22.0956 19.8166 21.4173 19.3644 20.513C18.9122 19.6015 18.6861 18.4534 18.6861 17.0685V6.72469H21.1873V16.899C21.1873 18.086 21.5194 19.0327 22.1835 19.7393C22.8547 20.4458 23.7097 20.7991 24.7483 20.7991C25.3701 20.7991 26.0024 20.6401 26.6454 20.3222C27.2954 20.0042 27.8394 19.5167 28.2775 18.8596C28.7226 18.2025 28.9452 17.3653 28.9452 16.3479Z\" fill=\"#F7F7F8\"/><path d=\"M34.2368 23.0035V6.72469H36.7379V23.0035H34.2368ZM35.5085 4.01154C35.021 4.01154 34.6006 3.84551 34.2474 3.51343C33.9012 3.18135 33.728 2.78215 33.728 2.31583C33.728 1.84951 33.9012 1.45031 34.2474 1.11823C34.6006 0.786155 35.021 0.620117 35.5085 0.620117C35.9961 0.620117 36.4129 0.786155 36.7591 1.11823C37.1124 1.45031 37.289 1.84951 37.289 2.31583C37.289 2.78215 37.1124 3.18135 36.7591 3.51343C36.4129 3.84551 35.9961 4.01154 35.5085 4.01154Z\" fill=\"#F7F7F8\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13.4886 6.90927L13.4691 6.74467C13.3484 5.72546 12.863 4.94078 12.0047 4.37751C11.1367 3.80789 10.0649 3.51784 8.77915 3.51784C7.83824 3.51784 7.02364 3.67003 6.33097 3.96877C5.64321 4.26844 5.11311 4.67668 4.73267 5.19034C4.3612 5.70136 4.17529 6.28073 4.17529 6.9347C4.17529 7.48274 4.30503 7.94324 4.55669 8.32466C4.82402 8.71186 5.16497 9.03643 5.58152 9.29862C6.00852 9.56024 6.456 9.77709 6.92413 9.94928C7.40034 10.1173 7.83659 10.2534 8.23312 10.3577L8.23415 10.358L10.4374 10.9512C10.4376 10.9512 10.4378 10.9513 10.4379 10.9513C11.0106 11.1017 11.6455 11.3087 12.3422 11.5717C13.057 11.8389 13.7386 12.2032 14.3867 12.664C15.0521 13.1249 15.5998 13.717 16.0296 14.4381C16.4675 15.1729 16.6812 16.0662 16.6812 17.109C16.6812 18.3162 16.3643 19.4114 15.7294 20.3895C15.1003 21.3696 14.1814 22.1434 12.9824 22.7141C11.7853 23.2873 10.3395 23.5697 8.65197 23.5697C7.07794 23.5697 5.70519 23.3157 4.53879 22.8013L4.5384 22.8011C3.38142 22.2877 2.46376 21.5686 1.79225 20.6416L1.79168 20.6409C1.1271 19.7134 0.75268 18.6376 0.66564 17.419L0.651367 17.2192H3.73598L3.75067 17.3897C3.81833 18.1745 4.08039 18.8127 4.52969 19.3153C4.99433 19.82 5.5817 20.1993 6.29662 20.4513C7.02428 20.6983 7.80897 20.8226 8.65197 20.8226C9.63469 20.8226 10.5108 20.6635 11.2833 20.3492C12.0568 20.0274 12.6617 19.5859 13.1054 19.028C13.5443 18.4692 13.7646 17.818 13.7646 17.0666C13.7646 16.3825 13.5744 15.8431 13.2077 15.4313C12.8261 15.0029 12.3201 14.6502 11.6835 14.3764C11.035 14.0975 10.3329 13.8529 9.57709 13.6429L9.57577 13.6426L6.90502 12.8795L6.90472 12.8794C5.18976 12.3863 3.8191 11.6789 2.80308 10.7499C1.77149 9.80678 1.25867 8.57147 1.25867 7.06188C1.25867 5.81085 1.59764 4.71183 2.27992 3.77278L2.28008 3.77257C2.96489 2.83276 3.88166 2.10652 5.02488 1.59275C6.17521 1.07188 7.45594 0.813175 8.86394 0.813175C10.2852 0.813175 11.5559 1.06804 12.6721 1.58257C13.7854 2.08867 14.6735 2.7858 15.3303 3.67594C15.9963 4.569 16.3478 5.58441 16.3843 6.71672L16.3905 6.90927H13.4886ZM15.1805 3.78703C14.5446 2.92504 13.6826 2.24676 12.5945 1.75218C11.5064 1.25053 10.2629 0.999704 8.86394 0.999704C7.47911 0.999704 6.22499 1.25406 5.10158 1.76278C3.98523 2.26442 3.09498 2.97097 2.43083 3.88242C1.77374 4.7868 1.44519 5.84662 1.44519 7.06188C1.44519 8.52443 1.93978 9.7079 2.92894 10.6123C3.91811 11.5167 5.26055 12.2126 6.95626 12.7001L9.62701 13.4632C10.3901 13.6752 11.1002 13.9225 11.7573 14.2051C12.4143 14.4877 12.9442 14.8551 13.347 15.3073C13.7497 15.7595 13.9511 16.3459 13.9511 17.0666C13.9511 17.8579 13.7179 18.5503 13.2516 19.1438C12.7853 19.7303 12.1529 20.1895 11.3545 20.5216C10.5561 20.8466 9.65527 21.0091 8.65197 21.0091C7.78999 21.0091 6.98452 20.8819 6.23558 20.6276C5.49371 20.3662 4.87901 19.9705 4.3915 19.4406C3.91104 18.9036 3.63549 18.2253 3.56484 17.4057H0.851694C0.856164 17.4683 0.86141 17.5305 0.867431 17.5923C0.975622 18.7022 1.33425 19.6822 1.94331 20.5322C2.59333 21.4295 3.48358 22.129 4.61406 22.6307C5.7516 23.1323 7.09757 23.3831 8.65197 23.3831C10.3194 23.3831 11.7361 23.104 12.9019 22.5459C14.0747 21.9877 14.965 21.2352 15.5726 20.2884C16.1873 19.3417 16.4946 18.2819 16.4946 17.109C16.4946 16.0916 16.2862 15.2331 15.8694 14.5336C15.4525 13.8341 14.9226 13.2618 14.2796 12.8167C13.6437 12.3645 12.976 12.0077 12.2766 11.7463C11.5841 11.4849 10.9553 11.28 10.3901 11.1316L8.18565 10.5381C7.78292 10.4321 7.34133 10.2943 6.86088 10.1248C6.38043 9.94813 5.92117 9.72556 5.48311 9.45708C5.04505 9.18152 4.68471 8.83885 4.40209 8.42905C4.12654 8.01219 3.98876 7.51407 3.98876 6.9347C3.98876 6.24229 4.1866 5.62406 4.58226 5.08001C4.985 4.53597 5.54317 4.10851 6.25678 3.79763C6.97746 3.48675 7.81825 3.33131 8.77915 3.33131C10.0933 3.33131 11.2026 3.62806 12.107 4.22156C13.0114 4.81506 13.5272 5.64879 13.6543 6.72274H16.1979C16.1959 6.66018 16.1929 6.598 16.1889 6.53621C16.1228 5.51617 15.7867 4.59978 15.1805 3.78703ZM28.7588 6.53621H31.633V23.1881H28.7588V20.6897C28.3658 21.391 27.813 21.9966 27.1042 22.5065L27.1033 22.5072C26.2593 23.1068 25.2015 23.4001 23.943 23.4001C22.8974 23.4001 21.9609 23.1711 21.1384 22.7084L21.1373 22.7078C20.3105 22.2354 19.6645 21.528 19.1977 20.5944L19.1974 20.5939C18.7287 19.6491 18.4997 18.4703 18.4997 17.0666V6.53621H21.374V16.897C21.374 18.0475 21.6947 18.9447 22.3192 19.6092C22.9526 20.2758 23.7573 20.6106 24.7484 20.6106C25.3374 20.6106 25.9416 20.4602 26.5628 20.153L26.5635 20.1527C27.1812 19.8506 27.701 19.3864 28.1224 18.7542L28.1232 18.7531C28.5422 18.1345 28.7588 17.3365 28.7588 16.3459V6.53621ZM22.1837 19.7373C21.5195 19.0308 21.1874 18.084 21.1874 16.897V6.72274H18.6863V17.0666C18.6863 18.4514 18.9123 19.5996 19.3645 20.511C19.8167 21.4154 20.4385 22.0937 21.2298 22.5459C22.0212 22.991 22.9255 23.2136 23.943 23.2136C25.1724 23.2136 26.1898 22.9274 26.9952 22.3551C27.7889 21.7842 28.3767 21.0933 28.7588 20.2824C28.7645 20.2703 28.7701 20.2582 28.7757 20.2461H28.9453V23.0016H31.4465V6.72274H28.9453V16.3459C28.9453 17.3633 28.7228 18.2006 28.2776 18.8577C27.8396 19.5148 27.2955 20.0023 26.6455 20.3202C26.0025 20.6382 25.3702 20.7972 24.7484 20.7972C23.7098 20.7972 22.8549 20.4439 22.1837 19.7373ZM34.0504 23.1881V6.53621H36.9246V23.1881H34.0504ZM34.1197 3.64739L34.1184 3.6461C33.7367 3.27998 33.5417 2.83264 33.5417 2.31388C33.5417 1.79512 33.7367 1.34779 34.1184 0.98167L34.1197 0.980367C34.5078 0.615583 34.974 0.431641 35.5087 0.431641C36.0432 0.431641 36.5063 0.61549 36.8878 0.981101C37.2764 1.34672 37.4757 1.79417 37.4757 2.31388C37.4757 2.83361 37.2764 3.28108 36.8878 3.6467C36.5063 4.01229 36.0432 4.19613 35.5087 4.19613C34.974 4.19613 34.5078 4.01218 34.1197 3.64739ZM36.7593 3.51148C37.1125 3.1794 37.2892 2.7802 37.2892 2.31388C37.2892 1.84756 37.1125 1.44836 36.7593 1.11628C36.4131 0.784208 35.9962 0.618169 35.5087 0.618169C35.0212 0.618169 34.6008 0.784208 34.2475 1.11628C33.9013 1.44836 33.7282 1.84756 33.7282 2.31388C33.7282 2.7802 33.9013 3.1794 34.2475 3.51148C34.6008 3.84356 35.0212 4.0096 35.5087 4.0096C35.9962 4.0096 36.4131 3.84356 36.7593 3.51148ZM34.2369 23.0016H36.7381V6.72274H34.2369V23.0016Z\" fill=\"#F7F7F8\"/></svg>";
        let bytevec: vector<u8> = b"Hey Sui World!";
        let i = 0;
        while (i < 5) {
            // vector::append(&mut bytevec, svg);

            vector::append(&mut bytevec, b"The Sui blockchain, an innovative and highly scalable layer-1 blockchain developed by Mysten Labs");
            i = i + 1;
        };

        let compressed_directly_to8: vector<u8> = compress::compress8(&bytevec);
        debug::print(&vector::length(&bytevec));
        debug::print(&vector::length(&compressed_directly_to8));

        let decompressed_from8: vector<u8> = compress::decompress8(&compressed_directly_to8);
        debug::print(&vector::length(&decompressed_from8));

        assert!(decompressed_from8 == bytevec, 0);

        let compressed_to_vec_16: vector<u16> = compress::compress16(&bytevec);
        // expect byte length to be < than in original, on shorter bytevec it may be longer though
        assert!((vector::length(&compressed_to_vec_16)*2) < vector::length(&bytevec), 0); // *2 as it's u16, 2 bytes

        let decompressed_back: vector<u8> = compress::decompress16(&compressed_to_vec_16);
        // same length
        assert!((vector::length(&decompressed_back)) == vector::length(&bytevec), 0);
        // same data restored:
        assert!(decompressed_back == bytevec, 0);

        // test compressing from vector<u8> to vector<u8>
        let compressed_to_vec_8: vector<u8> = compress::compress(&bytevec);

        debug::print(&vector::length(&bytevec));
        debug::print(&(vector::length(&compressed_to_vec_16)*2) );
        debug::print(&vector::length(&compressed_to_vec_8));

        // expect the length to be shorter than u16, as we use variable-length encoding scheme
        assert!(vector::length(&compressed_to_vec_8) <= (1 + vector::length(&compressed_to_vec_16)*2), 0); // *2 as it's u16, 2 bytes, 1 is control byte
        assert!(vector::length(&compressed_to_vec_8) <= (vector::length(&bytevec)), 0); // 

        // and try to restore from vector<u8>
        let decompressed_back_from_u8 = compress::decompress(&compressed_to_vec_8);
        // same length
        assert!((vector::length(&decompressed_back)) == vector::length(&bytevec), 0);
        // same data restored:
        assert!(decompressed_back_from_u8 == bytevec, 0);
    }

    #[test]
    fun test_vec_packing() {
        let vec16: vector<u16> = vector[255];
        let i = 0;
        while (i < 50) {
            vector::append(&mut vec16, vector[(i%255), (i%255)]);
            i = i + 1;
        };

        let original_vector_length = vector::length(&vec16);
        let original_vector_length_in_bytes = original_vector_length * 2;

        let packed: vector<u8> = compress::pack_u16_into_u8(&vec16);

        let packed_vector_length = vector::length(&packed);

        // be sure we saved some space
        assert!(packed_vector_length < original_vector_length_in_bytes, 0);

        // try to restore u16 vector
        let restored_vec16: vector<u16> = compress::unpack_u8_into_u16(&packed);

        // same length
        assert!((vector::length(&restored_vec16)) == vector::length(&vec16), 0);

        // same data restored:
        assert!(restored_vec16 == vec16, 0);
    }
}