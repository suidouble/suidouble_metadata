
module suidouble_metadata::fortune_cookie {

    use suidouble_metadata::metadata;
    use suidouble_metadata::time_capsule;
    use sui::package;
    use std::string::{utf8};
    use sui::display;
    // use sui::transfer;    // provided by default
    // use sui::tx_context;  // provided by default
    use std::debug;

    use sui::test_scenario as ts;
    use sui::test_utils as sui_tests;

    public struct FORTUNE_COOKIE has drop {} /// One-Time-Witness for the module.

    public struct FortuneCookieStore has key {
        id: UID,
        prophecies: vector<u8>,
        waiting_for_drand_round: u32 // should be u64 actually, but we keep it simple for indexing in metadata
    }

    public struct FortuneCookie has key, store {
        id: UID,
        prophecy: vector<u8>
    }

    fun init(otw: FORTUNE_COOKIE, ctx: &mut TxContext) {
        // Claim the `Publisher` for the package!
        let publisher = package::claim(otw, ctx);

        let fortune_cookie_store = FortuneCookieStore {
            id: object::new(ctx),
            prophecies: b"",
            waiting_for_drand_round: 0
        };

        let keys = vector[
            utf8(b"name"),
            utf8(b"link"),
            utf8(b"image_url"),
            utf8(b"description"),
            utf8(b"project_url"),
            utf8(b"creator"),
        ];

        let values = vector[
            utf8(b"Prophecy {uncompressed_text}"),
            utf8(b"https://github.com/suidouble/suidouble_metadata"),
            utf8(b"https://suidouble.github.io/dl/promise.png"),
            utf8(b"{uncompressed_text}"),
            // Project URL is usually static
            utf8(b"https://github.com/suidouble/suidouble_metadata"),
            // Creator field can be any
            utf8(b"SuiDouble")
        ];

        // Get a new `Display` object for the `Color` type.
        let mut display = display::new_with_fields<FortuneCookie>(
            &publisher, keys, values, ctx
        );

        display::update_version(&mut display);
        transfer::public_transfer(publisher, tx_context::sender(ctx));
        transfer::public_transfer(display, tx_context::sender(ctx));
        transfer::share_object(fortune_cookie_store);
    }

    entry fun mint_fortune_cookie(fortune_cookie_store: &mut FortuneCookieStore, drand_round_signature: vector<u8>, ctx: &mut TxContext) {
        if (fortune_cookie_store.waiting_for_drand_round == 0) {
            // we re not waiting anymore :(
        } else {

            let mut drand = time_capsule::drand_quicknet();
            if (drand.verify_signature( (fortune_cookie_store.waiting_for_drand_round as u64), &drand_round_signature)) {
                // looks signature is ok

                // get encrypted prophecy from store metadata:
                let prophecy_encrypted = metadata::get_vec_u8(&fortune_cookie_store.prophecies, fortune_cookie_store.waiting_for_drand_round);

                // decrypt it using new drand round signature
                let prophecy_decrypted = drand.decrypt(&prophecy_encrypted, drand_round_signature);

                // if ok:
                if (vector::length(&prophecy_decrypted) > 0) {
                    // issue FortuneCookie and remove prophecy from store metadata
                    metadata::remove_chunk(&mut fortune_cookie_store.prophecies, fortune_cookie_store.waiting_for_drand_round);
                    unwrap_waiting_for_drand_round(fortune_cookie_store);

                    let cookie = FortuneCookie{
                        id: object::new(ctx),
                        prophecy: prophecy_decrypted
                    };
                    transfer::transfer(cookie, tx_context::sender(ctx));
                }
            };

        };

    }

    // unwraps minimim chunk_id from .prophecies metadata into .waiting_for_drand_round field of the store
    //    so it's availiable to read faster
    fun unwrap_waiting_for_drand_round(fortune_cookie_store: &mut FortuneCookieStore): u32 {
        let rounds = metadata::get_chunks_ids(&fortune_cookie_store.prophecies);
        let mut minimum_round = 0; // waiting for nothing
        let mut i = 0;
        while (i < vector::length(&rounds)) {
            let round = *vector::borrow(&rounds, i);
            if (minimum_round == 0) {
                minimum_round = round;
            } else if (round < minimum_round) {
                minimum_round = round;
            };

            i = i + 1;
        };
        fortune_cookie_store.waiting_for_drand_round = minimum_round;

        minimum_round
    }

    public entry fun attach_future_prophecies(fortune_cookie_store: &mut FortuneCookieStore, metadata: vector<u8>) {
        // @todo: you'd have to check for access here for the real world usage
        // @todo: you'd have to check for prophecies metadata to be correct
        fortune_cookie_store.prophecies = metadata;
        unwrap_waiting_for_drand_round(fortune_cookie_store);
    }

    const TEST_SENDER_ADDR: address = @0x1;

    #[test]
    fun test_contract() {
        // Imagine we are running this on May 01 2024
        let start_timestamp_ms = 1714510800000; // Wed May 01 2024 16:23:14 GMT+0000

        // debug::print(&(drand.round_at(start_timestamp_ms) as u32));

        let mut scenario = ts::begin(TEST_SENDER_ADDR);

        init(sui_tests::create_one_time_witness<FORTUNE_COOKIE>(), ts::ctx(&mut scenario));
        ts::next_tx(&mut scenario, TEST_SENDER_ADDR);

        let mut store: FortuneCookieStore = ts::take_shared(&scenario);
        // let encrypted_prophecies = get_encrypted_prophecies(start_timestamp_ms); // starting from Wed May 01 2024 16:23:14 GMT+0000
        let encrypted_prophecies = get_pre_encrypted();

        // debug::print(&encrypted_prophecies);
        attach_future_prophecies(&mut store, encrypted_prophecies );

        ts::next_tx(&mut scenario, TEST_SENDER_ADDR);

        let drand = time_capsule::drand_quicknet();

        // Store is waiting for the very first drand round at Wed May 01 2024 16:23:14 GMT+0000
        assert!((drand.round_at(start_timestamp_ms) as u32) == store.waiting_for_drand_round, 0);

        // as we are from the future, we already know signature for that drand round
        let signatures = signatures_from_the_future();
        let signature_for_7235811 = metadata::get_vec_u8(&signatures, 7235811);
        assert!(vector::length(&signature_for_7235811) > 0, 0);

        // try to mint a fortune cookie in the future
        let signature = metadata::get_vec_u8(&signatures, store.waiting_for_drand_round);
        mint_fortune_cookie(&mut store, signature, ts::ctx(&mut scenario));
        ts::next_tx(&mut scenario, TEST_SENDER_ADDR);

        // check that prophecy #0 minted from encrypted metadata
        let minted = ts::take_from_sender<FortuneCookie>(&scenario);
        assert!(minted.prophecy == b"Your next big break in crypto will come... right after you HODL a bit longer", 0);
        ts::return_to_sender(&scenario, minted);
        assert!(vector::length(&ts::ids_for_sender<FortuneCookie>(&scenario)) == 1, 0); // own FortuneCookie count
        ts::next_tx(&mut scenario, TEST_SENDER_ADDR);

        // ... time passes
        let mut expected_own_count = 1;

        while (metadata::has_chunk(&signatures, store.waiting_for_drand_round)) {
            let signature = metadata::get_vec_u8(&signatures, store.waiting_for_drand_round);
            debug::print(&utf8(b"round:"));
            debug::print(&store.waiting_for_drand_round);

            mint_fortune_cookie(&mut store, signature, ts::ctx(&mut scenario));
            ts::next_tx(&mut scenario, TEST_SENDER_ADDR);
            let minted = ts::take_from_sender<FortuneCookie>(&scenario);

            debug::print(&utf8(b"minted FortuneCookie with prophecy of:"));
            debug::print(&utf8(minted.prophecy));


            ts::return_to_sender(&scenario, minted);
            expected_own_count = expected_own_count + 1;
            assert!(vector::length(&ts::ids_for_sender<FortuneCookie>(&scenario)) == expected_own_count, 0); // own FortuneCookie count
            ts::next_tx(&mut scenario, TEST_SENDER_ADDR);
            // ... time passes
            debug::print(&utf8(b".... one day later ...."));
        };


        debug::print(&utf8(b"Store is waiting for signature of round:"));
        debug::print(&store.waiting_for_drand_round);

        ts::return_shared(store);
        ts::end(scenario);

    }

    #[test_only]
    fun signatures_from_the_future(): vector<u8> {
        // as we are running from the future, compared to  May 01 2024,
        // we already know some drand signatures for rounds that was not available on  May 01 2024
        let mut ret = vector::empty();
        metadata::set(&mut ret, 7235811, &x"b7d567fa56c95c73ff7ede42cf7aa4936c0286fa5c703697be518502c22c1fe3a41beb3061daeb5871ed7ed160642691");
        metadata::set(&mut ret, 7264611, &x"9085e82522436b405d33f368f9b95615c33314f6bf550c0a2564fe5e2d822fb165e02e5a264fe6d79017b5f822bafc92");
        metadata::set(&mut ret, 7293411, &x"93a0dd28de88676fef4a2f28263ca2c461b5b9b96b52872d72cf721d1003e882e06a2c5b7b1d835a54aadf37cd67b069");
        metadata::set(&mut ret, 7322211, &x"941673e84e1238a2a6b4c5c294f646e95315f25c6fe55eb79039a8e84fed91cb109b0d292453508affdcd4f5e16755fd");
        // feel free to add more signatures for next rounds, as they are available for you, my future friend

        ret
    }

    #[test_only]
    fun get_encrypted_prophecies(start_timestamp_ms: u64): vector<u8> {
        let mut raw_prophecies_metadata:vector<u8> = vector::empty();

        let mut drand = time_capsule::drand_quicknet();
        // let start_timestamp_ms = 1717189200000;      // starting from Fri May 31 2024 21:00:00 GMT+0000
        let issue_prophecy_interval = 24*60*60*1000; // issue every day a new prophecy

        let prophecies = get_test_prophecies();
        let mut i = 0;
        while (i < vector::length(&prophecies)) {
            let future_timestamp_ms = start_timestamp_ms + (i * issue_prophecy_interval);
            let future_drand_round = drand.round_at(future_timestamp_ms);

            let encrypted_for_the_future = drand.encrypt_for_time(future_timestamp_ms, vector::borrow(&prophecies, i));

            metadata::set(&mut raw_prophecies_metadata, (future_drand_round as u32), &encrypted_for_the_future);
            i = i + 1;
        };

        raw_prophecies_metadata
    }

    #[test]
    fun test_get_encrypted_prophecies() {
        let start_timestamp_ms = 1714510800000; // Wed May 01 2024 16:23:14 GMT+0000
        let prophecies = get_test_prophecies();
        let signatures = signatures_from_the_future();
        let encrypted_metadata = get_encrypted_prophecies(start_timestamp_ms);
        assert!((metadata::get_chunks_count(&encrypted_metadata) as u64) == vector::length(&prophecies), 0);

        // try to decrypt some
        let needed_rounds = metadata::get_chunks_ids(&encrypted_metadata);
        let round_n_0 = *vector::borrow(&needed_rounds, 0);
        let encrypted_prophecy = metadata::get_vec_u8(&encrypted_metadata, round_n_0);

        let drand_signature_for_round_n_0 = metadata::get_vec_u8(&signatures, round_n_0);

        let drand = time_capsule::drand_quicknet();
        let decrypted_n_0 = drand.decrypt(&encrypted_prophecy, drand_signature_for_round_n_0);

        assert!(decrypted_n_0 == b"Your next big break in crypto will come... right after you HODL a bit longer", 0);
    }

    #[test_only]
    fun get_test_prophecies(): vector<vector<u8>> {
        let mut ret = vector::empty();
        ret.push_back(b"Your next big break in crypto will come... right after you HODL a bit longer");
        ret.push_back(b"You will predict the next big thing in crypto. Too bad no one will believe you");
        ret.push_back(b"Your crypto portfolio will rise... right after you stop checking it every hour");
        ret.push_back(b"You will become a crypto expert... according to your mom");
        ret.push_back(b"The future of crypto is bright. Just don't stare directly at the screen");
        ret.push_back(b"Your Sui wallet will overflow... with questions from your friends");
        ret.push_back(b"Beware of blockchain investments promising moon trips. They might land you in a crater");
        ret.push_back(b"You will impress your friends with your blockchain wisdom... until they ask for details");
        ret.push_back(b"Blockchain success is within your reach... right after you decipher the whitepaper");
        ret.push_back(b"You will become a Sui guru... and still not know what to tell your grandma");
        ret.push_back(b"Your future is on the blockchain... once you figure out how to get it off there");
        ret.push_back(b"Success in Sui awaits you... as soon as you remember where you stored your keys");
        ret.push_back(b"You will change the world with Sui... or at least confuse it a bit");
        ret.push_back(b"A fortune in crypto awaits you... unless your cat walks on the keyboard");
        ret.push_back(b"You will become a blockchain influencer... according to your cat");
        ret.push_back(b"Your dog will finally understand blockchain... and still prefer chasing its tail");
        ret.push_back(b"Beware of your cat's curiosity about your crypto keys");
        ret.push_back(b"Your cat will trade NFTs... for naps, food, and laser pointers");
        ret.push_back(b"Your cat's blockchain advice: Always land on your feet, even if the market doesn't");
        ret.push_back(b"Beware of Sui fortune tellers. They might just be after your private keys");
        ret.push_back(b"You will be a crypto millionaire! Right after you invent a time machine");
        ret.push_back(b"Crypto will take you on a wild ride... hold on to your digital hat");
        ret.push_back(b"Crypto will revolutionize your life... mainly by making you constantly check the market");
        ret.push_back(b"Your Sui fortune is written in the stars... and also on a very secure blockchain");

        ret
    }



    fun get_pre_encrypted(): vector<u8> {
        return x""
    }
}